@model OrderSearchModel
@using Nop.Web.Models.Order
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
    //page class
    Html.AppendPageCssClassParts("html-account-page");
    Html.AppendPageCssClassParts("html-order-list-page");

}
@section left
{
    @await Component.InvokeAsync("CustomerNavigation", new { selectedTabId = CustomerNavigationEnum.Orders })
}
<div class="page account-page order-list-page">
    <div class="page-title">
        <h1>@T("Account.MyAccount") - @T("Account.CustomerOrders")</h1>
    </div>
    <div class="page-body">
        <form asp-controller="Order" asp-action="CustomerOrders" method="post">
            <section class="content">
                <div class="form-horizontal">
                    <div class="cards-group">

                        <div class="card card-default card-search">
                            <div class="card-body">

                                <div class="row search-row" data-hideAttribute="OrdersPage.HideSearchBlock">
                                    <div class="search-text">@T("Admin.Common.Search")</div>
                                    <div class="icon-search"><i class="fas fa-search" aria-hidden="true"></i></div>
                                </div>


                                <div class="form-group row">
                                    <div class="col-md-4">
                                        <nop-label asp-for="OrderStatusIds" />
                                    </div>
                                    <div class="col-md-8">
                                        <nop-select asp-for="OrderStatusIds" asp-items="Model.AvailableOrderStatuses" />
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="text-center col-12">
                                        <button type="button" id="search-orders" class="btn btn-primary btn-search">
                                            <i class="fas fa-search"></i>
                                            @T("Admin.Common.Search")
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card card-default">
                            <div class="card-body" id="div-orders-grid">
                                @{
                                    var gridModel = new DataTablesModel
                                    {
                                        Name = "orders-grid",
                                        UrlRead = new DataUrl("OrderList", "Order", null),
                                        SearchButtonId = "search-orders",
                                        Length = Model.PageSize,
                                        LengthMenu = Model.AvailablePageSizes,
                                        // enable to sort
                                        Ordering = true,
                                        ServerSide = false,

                                        //default ordering
                                        SortBy = 2,
                                        SortDirection = DataTablesModel.DESCENDING_ORDERING,

                                        RefreshButton = false,
                                        Filters = new List<FilterParameter>
                                                                                            {
                                                new FilterParameter(nameof(Model.OrderStatusIds))
                                            }
                                    };

                                    gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerOrderListModel.OrderDetailsModel.CustomOrderNumber))
                                    {
                                        Title = T("Account.CustomerOrders.OrderNumber").Text,
                                        Width = "20"
                                    });

                                    gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerOrderListModel.OrderDetailsModel.OrderStatus))
                                    {
                                        Title = T("Account.CustomerOrders.OrderStatus").Text,
                                        Width = "50",
                                        Render = new RenderCustom("renderColumnOrderStatus")
                                    });

                                    gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerOrderListModel.OrderDetailsModel.CreatedOn))
                                    {
                                        Title = T("Account.CustomerOrders.OrderDate").Text,
                                        Width = "120",
                                        Render = new RenderDate()
                                    });

                                    gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerOrderListModel.OrderDetailsModel.OrderTotal))
                                    {
                                        Title = T("Account.CustomerOrders.OrderTotal").Text,
                                        Width = "100",
                                    });

                                    gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerOrderListModel.OrderDetailsModel.Id))
                                    {
                                        Title = T("Account.CustomerOrders.OrderDetails").Text,
                                        Width = "50",
                                        ClassName = NopColumnClassDefaults.Button,
                                        Render = new RenderButtonDetail(new DataUrl("~/OrderDetails"))
                                    });
                                }

                                @await Html.PartialAsync("Table", gridModel)

                                <script>
                                    function renderColumnOrderStatus(data, type, row, meta) {
                                        var color;
                                        switch (row.OrderStatusId) {
                                            case 10:
                                                color = 'yellow';
                                                break;
                                            case 20:
                                                color = 'blue';
                                                break;
                                            case 30:
                                                color = 'green';
                                                break;
                                            case 40:
                                                color = 'red';
                                                break;
                                        }
                                        return '<span class="grid-report-item ' + color + '">' + data + '</span >';
                                    }
                                </script>

                            </div>
                        </div>

                    </div>
                </div>
                <div class="container-fluid">

                </div>
            </section>
        </form>
    </div>
</div>